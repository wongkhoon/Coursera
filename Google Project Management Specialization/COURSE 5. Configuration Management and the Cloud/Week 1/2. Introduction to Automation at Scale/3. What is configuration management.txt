[MUSIC] Imagine your team is in charge
of setting up a new server. This could be a physical
computer running close to you or a virtual machine running
somewhere in the cloud. To get things moving,
the team installs the operating system, configures some applications and
services, sets up the networking stack, and when everything is ready,
puts the server into use. By manually deploying the installation and
configuring the computer, we see that we're using
unmanaged configuration. When we say configuration here, we're talking about everything from
the current operating system and the applications installed to any
necessary configuration files or policies, including anything else that's
relevant for the server to do its job. When you work in IT, you're generally in
charge of the configuration of a lot of different devices, not just servers. Network routers printers and even smart home devices can have
configuration that we can control. For example, a network switch might use
a config file to set up each of its ports. All right, so now we know what we mean
when we talk about configuration. We said that manually deploying a server
means that the configuration is unmanaged. So what would it mean for
the configuration to be managed? It means using a configuration
management system to handle all of the configuration of the devices
in your fleet, also known as nodes. There's a bunch of different tools
available depending on the devices and services involved. Typically you'll define a set of rules
that have to be applied to the nodes you want to manage and then have a process
that ensures that those settings are true on each of the nodes. At a small scale,
unmanaged configurations seem inexpensive. If you only manage a handful of servers, you might be able to get away with doing
that without the help of automation. You could log into each device and
make changes by hand when necessary. And when your company needs a new database
server, you might just go ahead and manually install the OS and the database
software into a spare computer. But this approach doesn't
always scale well. The more servers that you need to deploy, the more time it will take
you to do it manually. And when things go wrong,
and they often do, it can take a lot of time to recover and
have the servers back online. Configuration management systems
aim to solve this scaling problem. By managing the configuration of
a fleet with a system like this, large deployments become easier to work
with because the system will deploy the configuration automatically no
matter how many devices you're managing. When you use configuration management and
you need to make a change in one or more computers, you don't manually connect to
each computer to perform operations on it. Instead, you edit the configuration
management rules and then let the automation apply those
rules in the affected machines. This way the changes
you make to a system or group of systems are done in a systematic,
repeatable way. Being repeatable is important because it
means that the results will be the same on all the devices. A configuration management tool
can take the rules you define and apply them to the systems that it manages,
making changes efficient and consistent. Configuration management systems
often also have some form of automatic error correction built in so that they can recover from certain
types of errors all by themselves. For example, say you found that
some application that was being used widely in your company was
configured to be very insecure. You can add rules to your configuration
management system to improve the settings on all computers. And this won't just apply
the more secure settings once. It will continue to monitor
the configuration going forward. If a user changes the settings on their
machine, the configuration management tooling will detect this change and
reapply the settings you defined in code. How cool is that? There are lots of configuration
management systems available in the IT industry today. Some popular systems include Puppet,
Chef, Ansible, and CFEngine. These tools can be used to manage
locally hosted infrastructure. Think bare metal or virtual machines,
like the laptops or work stations that
employees use at a company. Many also have some kind of Cloud
integration allowing them to manage resources in Cloud environments like
Amazon EC2, Microsoft Azure, or the Google Cloud platform, and
the list doesn't stop there. There are some platform specific tools,
like SCCM and Group Policy for Windows. These tools can be very useful
in some specific environments, even when they aren't as
flexible as the others. For this course, we've chosen to focus on
Puppet because it's the current industry standard for configuration management. Keep in mind though that selecting
a configuration management system is a lot like deciding on a programming language or
version control system. You should pick the one that best fits
your needs and adapt accordingly, if necessary. Each has its own strengths and weaknesses. So a little research beforehand can help
you decide which system is best suited for your particular infrastructure needs. There are a lot of tools out there. So be sure to check them out. Up next, we'll discuss how we can make the
most out of our configuration management system using the infrastructure
as code paradigm.