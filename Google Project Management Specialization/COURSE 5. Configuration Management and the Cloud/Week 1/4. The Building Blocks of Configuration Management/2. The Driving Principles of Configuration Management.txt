Up to now, we've seen a few examples of what
Puppet rules look like, including a bunch of different resources and even
a conditional expression. You might have
noticed that in all the examples we've checked out, we were never telling the
computer the steps it should follow in order
to do what we wanted. Instead, we were just declaring the end goal that we
wanted to achieve, like going to a drive-through
and ordering a burger, we didn't make it,
but there it is. The providers that we mentioned earlier lake apt and yum are the ones in charge
of turning our goals into whatever actions
are necessary. We say that Puppet uses a
declarative language because we declare the state that we want to achieve rather than the
steps to get there. Traditional languages
like Python or C are called procedural because we write out the procedure
that the computer needs to follow to
reach our desired goal. Coming from a procedural
language like Python, it might take some time
to get used to writing declarative code like the ones used for Puppet, and that's okay. Just remember that when it comes to configuration
management, it makes sense to simply state what the
configuration should be, not what the computer
should do to get there. Say you're using a resource to declare that you want
a package installed, you don't care what
commands a computer has to run you install it, you only care that after the configuration
management tool has run, the package is installed. Another important aspect of configuration management is that operations should be idempotent. In this context, an idempotent action can
be performed over and over again without changing
the system after the first time the
action was performed, and with no unintended
side effects. Let's check this out with an
example of a file resource. This resource ensures that the /etc/issue file has a set of permissions and a
specific line in it. Fulfilling this requirement
is an idempotent operation. If the file already exists
and has the desired content, then Puppet will understand that no action has to be taken. If the file doesn't exist, then puppet will create it. If the contents or permissions don't match, Puppet
will fix them. No matter how many times
the agent applies the rule, the end result is
that this file will have the requested
contents and permissions. Idempotency is a
valuable property of any piece of automation. If a script is idempotent, it means that it can fail
halfway through its task and be run again without
problematic consequences. Say you're running your
configuration management system to setup a new server. Unfortunately, the setup fails because you forgot to
add a second disk to the computer and the
configuration required two disks. If your automation is idempotent, you can add the missing disk and then have the system pick
up from where it left off. Most Puppet resources
provide idempotent actions, and we can rest assured
that two runs of the same set of rules will
lead to the same end result. An exception to this
is the exec resource, which runs commands for us. The actions taken by the
exec resource might not be idempotent since a command might modify the system each
time it's executed. To understand this, let's
check out what happens when we execute a command that
moves a file on our computer. First, we'll check that the
example.txt file is here, and then we'll move it to
the desktop directory. This works fine now, but what happens if we run
the exact same command again after it's
been executed once? We receive an error because the file is no longer
in the same place. In other words, this was
not an idempotent action, as executing the same
action twice produced a different result and the unintended side
effect of an error. If we were running
this inside Puppet, this would cause our Puppet
run to finish with an error. So if we need to use the exec resource to
run a command for us, we need to be careful to ensure that the
action is idempotent. We could do that for
example by using the onlyif attribute like this. Using the onlyif attribute, we specified that this
command should be executed only if the file that
we want to move exists. This means that the file
will be moved if it exists and nothing will
happen if it doesn't. By adding this conditional, we've taken an action that's not idempotent and turned it
into an idempotent one. Another important aspect of how configuration management works is the test and repair paradigm. This means that
actions are taken only when they are necessary
to achieve a goal. Puppet will first test
to see if the resource being managed like a
file or a package, actually needs to be modified. If the file exists in
the place we want it to, no action needs to be taken. If a package is
already installed, there's no need to
install it again. This avoids wasting time doing actions that aren't needed. Finally, another
important characteristic is that Puppet is stateless, this means that
there's no state being kept between runs of the agent. Each Puppet run is independent of the previous one,
and the next one. Each time the puppet agent runs, it collects the current facts. The Puppet master generates the rules based just
on those facts, and then the agent applies
them as necessary. We're just getting
started with what configuration management is and what it looks like in Puppet. But hopefully, you're
starting to see how understanding these
basic concepts and how turning them into
practical rules can help you manage a small
army of computers. Up next, there's a reading with links to more information about the concepts we've
covered followed by a quick quiz. You've got this.